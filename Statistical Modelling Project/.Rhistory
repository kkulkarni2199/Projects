summarise(airpollution)
summary(airpollution)
summary(airpollution)
pairs(airpollution)
plot(airpollution$SMEAN ~ airpollution$GE6
6)
plot(airpollution$SMEAN ~ airpollution$GE65)
plot(airpollution$SMEAN ~ airpollution$GE65, size=airpollution$PM2)
plot(airpollution$SMEAN ~ airpollution$GE65, size=airpollution$PM2)
plot(airpollution$SMEAN ~ airpollution$GE65/10)
plot(airpollution$SMEAN ~ (airpollution$GE65/10))
plot(airpollution$SMEAN ~ (airpollution$GE65))
ggplot(data = airpollution, mapping = aes(smean, ge65))
ggplot(data = airpollution, mapping = aes(SMEAN, GE65))
ggplot(data = airpollution, mapping = aes(SMEAN, GE65)) + geom_point(size = PM2)
ggplot(data = airpollution, mapping = aes(SMEAN, GE65)) + geom_point()
ggplot(data = airpollution, mapping = aes(SMEAN, GE65)) + geom_point(mapping = aes(size=PM2))
ggplot(data = airpollution, mapping = aes(SMEAN, GE65)) + geom_point(mapping = aes(size=PM2, alpha=1/3))
ggplot(data = airpollution, mapping = aes(SMEAN, GE65)) + geom_point(mapping = aes(size=PM2, alpha=1/3, color = PMEAN))
ggplot(data = airpollution, mapping = aes(SMEAN, GE65)) + geom_point(mapping = aes(size=PM2, alpha=1/3, color = PMEAN))
ggplot(data = airpollution, mapping = aes(SMEAN, GE65)) + geom_point(mapping = aes(size=PM2, alpha=1/3, color = PMEAN))
plot(airpollution$NONPOOR, airpollution$PERWH)
heatmap(airpollution)
heatmap(airpollution, Rowv = NULL, Colv = NULL, labRow = NA)
knitr::opts_chunk$set(echo = TRUE)
library(nclSLR)
library(ggplot2)
head(airpollution)
summary(airpollution)
pairs(airpollution)
ggplot(data = airpollution, mapping = aes(SMEAN, GE65)) + geom_point(mapping = aes(size=PM2, alpha=1/3, color = PMEAN))
total_variance = sum(var(airpollution))
total_variance
total_variance = sum(var(airpollution))
total_variance
cov_matrix = cov(airpollution)
det_cov_matrix = det(cov_matrix)
n = ncol(airpollution)
gen_variance = det_cov_matrix^(1/n)
gen_variance
tr(airpollution)
sum(diag(airpollution))
?cov
det(cov(airpollution))
sum(var(diag(airpollution)))
diag(airpollution)
sum(diag(airpollution))
sum(diag(var(airpollution)))
total_variance = sum(diag(var(airpollution)))
total_variance
gen_variance = det(cov(airpollution))
gen_variance
total_variance = sum(diag(var(airpollution)))
cat("Total Variation", total_variance, "/n")
gen_variance = det(cov(airpollution))
cat("Generalized Variance", gen_variance, "/n")
total_variance = sum(diag(var(airpollution)))
cat("Total Variation", total_variance, "\n")
gen_variance = det(cov(airpollution))
cat("Generalized Variance", gen_variance, "\n")
total_variance = sum(diag(var(airpollution)))
cat("Total Variation : ", total_variance, "\n")
gen_variance = det(cov(airpollution))
cat("Generalized Variance : ", gen_variance, "\n")
std_airpollution = scale(airpollution)
colMeans(airpollution)
colMeans(std_airpollution)
var(airpollution)
var(std_airpollution)
std_airpollution = scale(airpollution)
colMeans(std_airpollution)
apply(std_airpollution, 2, var)
var(std_airpollution)
cor(std_airpollution)
std_airpollution = scale(airpollution)
colMeans(std_airpollution)
apply(std_airpollution, 2, var)
var(std_airpollution)
cor(std_airpollution)
apply(std_airpollution, 2, var)
var(std_airpollution)
cor(airpollution)
pca1 = prcomp(x = std_airpollution)
pca1 = prcomp(x = std_airpollution)
pca1
pca1 = prcomp(x = std_airpollution)
summary(pca1)
pca1 = prcomp(x = std_airpollution)
pca1
pca1$rotation[1]
pca1$rotation[,1]
pca1$rotation[,2]
summary(pca1)
?airpollution
plot(pca1, type = "lines", main="")
title(xlab = "Component numbers")
plot(pca1$x[,1], pca1$x[,2])
plot(pca1$x[,1], pca1$x[,2], xlab = "First PC", ylab = "Second PC")
text(pca1$x[,1], pca1$x[,2], labels = rownames(airpollution), cex = 0.7, pos = 3)
plot(pca1$x[,1], pca1$x[,2], xlab = "First PC", ylab = "Second PC")
text(pca1$x[,1], pca1$x[,2], labels = rownames(airpollution), cex = 0.5, pos = 3)
plot(pca1$x[,1], pca1$x[,2], xlab = "First PC", ylab = "Second PC")
text(pca1$x[,1], pca1$x[,2], labels = rownames(airpollution), cex = 0.5, pos = 2)
plot(pca1$x[,1], pca1$x[,2], xlab = "First PC", ylab = "Second PC")
text(pca1$x[,1], pca1$x[,2], labels = rownames(airpollution), cex = 0.5, pos = 4)
plot(pca1$x[,1], pca1$x[,2], xlab = "First PC", ylab = "Second PC")
text(pca1$x[,1], pca1$x[,2], labels = rownames(airpollution), cex = 0.5, pos = 1)
plot(pca1$x[,1], pca1$x[,2], xlab = "First PC", ylab = "Second PC")
text(pca1$x[,1], pca1$x[,2], labels = rownames(airpollution), cex = 0.5, pos = 3)
plot(pca1$x[,1], pca1$x[,2], xlab = "First PC", ylab = "Second PC")
text(pca1$x[,1], pca1$x[,2], labels = rownames(airpollution), cex = 0.5, pos = 1)
plot(pca1$x[,1], pca1$x[,2], xlab = "First PC", ylab = "Second PC")
text(pca1$x[,1], pca1$x[,2], labels = rownames(airpollution), cex = 0.5, pos = 2)
knitr::opts_chunk$set(echo = TRUE)
gexpr = read.csv("D:\Study\Statistical Learning for Data Science\Ch10Ex11.csv", header = FALSE)
gexpr = read.csv(r"D:\Study\Statistical Learning for Data Science\Ch10Ex11.csv", header = FALSE)
gexpr = read.csv("D:/Study/Statistical Learning for Data Science/Ch10Ex11.csv", header = FALSE)
dim(gexpr)
var(std_airpollution)==cor(airpollution)
gc()
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
p = ncol(model_ready_data) - 1
setwd("D:/Study/Statistical Learning for Data Science/Project/Final Project")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(mlbench)
library(dplyr)
library(ggplot2)
library(leaps)
library(reshape2)
library(bestglm)
library(glmnet)
library(MASS)
library(caret)
data("BreastCancer")
breast_cancer_data = BreastCancer
head(breast_cancer_data)
predictor_cols = c("Cl.thickness", "Cell.size", "Cell.shape", "Marg.adhesion", "Epith.c.size", "Bare.nuclei", "Bl.cromatin", "Normal.nucleoli", "Mitoses")
for (col in predictor_cols) {
breast_cancer_data[[col]] = as.numeric(as.character(breast_cancer_data[[col]]))
}
str(breast_cancer_data)
rows_na = which(apply(is.na(breast_cancer_data), 1, any))
rows_missing_data = breast_cancer_data[rows_na, ]
rows_missing_data
breast_cancer_data_cleaned = na.omit(breast_cancer_data)
str(breast_cancer_data_cleaned)
summary(breast_cancer_data_cleaned)
ggplot(breast_cancer_data_cleaned, aes(x = Class, y = Cl.thickness, fill = Class)) +
geom_boxplot() +
labs(title = "Boxplot of Cell thickness, by Class") +
theme_bw()
ggplot(breast_cancer_data_cleaned, aes(x = Cell.size, fill = Class)) +
geom_bar(position = "dodge") +
geom_text(
aes(label = stat(count)),
stat = "count",
position = position_dodge(width = 0.9),
vjust = -0.5,
size = 3
) +
labs(title = "Bar plot of Cell size by Class with Counts", x = "Cell Size", y = "Count") +
theme_gray()
predictor_data = breast_cancer_data_cleaned[, predictor_cols]
correlation_matrix = cor(predictor_data)
print(correlation_matrix)
ggplot(melt(correlation_matrix), aes(Var1, Var2, fill = value)) +
geom_tile() +
labs(title = "Correlation Heatmap") +
scale_fill_gradient(high = "darkblue", low = "skyblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
y = breast_cancer_data_cleaned$Class
X_scaled = scale(predictor_data)
model_ready_data = data.frame(X_scaled, y)
head(model_ready_data)
best_fit_AIC = bestglm(model_ready_data, family = binomial, IC = "AIC")
best_fit_BIC = bestglm(model_ready_data, family = binomial, IC = "BIC")
summary(best_fit_AIC)
summary(best_fit_BIC)
best_fit_AIC$Subsets
best_fit_BIC$Subsets
(best_AIC = best_fit_AIC$ModelReport$Bestk)
(best_BIC = best_fit_BIC$ModelReport$Bestk)
p = ncol(model_ready_data) - 1
par(mfrow = c(1,2))
plot(0:p, best_fit_AIC$Subsets$AIC, type = "b" , xlab = "Number of predictors", ylab = "AIC")
points(best_AIC, best_fit_AIC$Subsets$AIC[best_AIC+1], col="red", pch=16)
axis(side = 1, at = 0:p)
plot(0:p, best_fit_BIC$Subsets$BIC, type = "b", xlab = "Number of predictors", ylab = "BIC")
points(best_BIC, best_fit_BIC$Subsets$BIC[best_BIC+1], col="red", pch=16)
axis(side = 1, at = 0:p)
pstar = 6
best_fit_AIC$Subsets[pstar+1, ]
(indices = as.logical(best_fit_AIC$Subsets[pstar+1, 2:(p+1)]))
model_ready_data_red = data.frame(X_scaled[, indices], y)
logreg1_fit = glm(y ~ ., data = model_ready_data_red, family = "binomial")
summary(logreg1_fit)
grid = 10^seq(1, -3, length.out = 100)
lasso_fit = glmnet(X_scaled, y, family = "binomial", alpha = 1, lambda = grid )
plot(lasso_fit, xvar = "lambda", col=rainbow(p), label = TRUE)
lasso_cv_fit = cv.glmnet(X_scaled, y, family = "binomial", alpha = 1, standardize = FALSE, lambda = grid, type.measure = "class")
plot(lasso_cv_fit)
lambda_lasso_min = lasso_cv_fit$lambda.min
print(paste("Minimum value for lambda ", lambda_lasso_min))
which_lamda_lasso = which(lasso_cv_fit$lambda == lambda_lasso_min)
print(paste("Row number with least lambda value ", which_lamda_lasso))
coef(lasso_fit, s = lambda_lasso_min)
(lda_model = lda(y ~ ., data = model_ready_data))
ctrl = trainControl(method = "cv", number = 10)
set.seed(123)
subset_cv_result = train(y ~ ., data = model_ready_data, method = "glm", family = "binomial", trControl = ctrl)
subset_test_error = 1 - mean(subset_cv_result$results$Accuracy)
print(paste("Test error of subset selection is ", subset_test_error))
lasso_ctrl = trainControl(method = "cv", number = 10)
set.seed(123)
lasso_cv_result = train(y ~ ., data = model_ready_data, method = "glmnet", trControl = lasso_ctrl)
lasso_test_error = 1 - mean(lasso_cv_result$results$Accuracy)
print(paste("Test error of LASSO model is ", lasso_test_error))
lda_ctrl = trainControl(method = "cv", number = 10)
set.seed(123)
lda_cv_result = train(y ~ ., data = model_ready_data, method = "lda", trControl = lda_ctrl)
lda_error = 1 - mean(lda_cv_result$results$Accuracy)
print(paste("Test error of LDA is ", lda_error))
subset_accuracy = round(100 * mean(subset_cv_result$results$Accuracy), 2)
lasso_accuracy = round(100 * mean(lasso_cv_result$results$Accuracy), 2)
lda_accuracy = round(100 * mean(lda_cv_result$results$Accuracy), 2)
subset_test_percent = round((subset_test_error * 100), 2)
lasso_test_percent = round((lasso_test_error * 100), 2)
lda_test_percent = round((lda_error * 100), 2)
performance_table = data.frame(
Method = c("Best Subset Selection", "Regression Method - LASSO", "Discriminant Analysis - LDA"),
Accuracy = c(subset_accuracy, lasso_accuracy, lda_accuracy),
Error_rate = c( subset_test_percent, lasso_test_percent, lda_test_percent)
)
print(performance_table)
coef(logreg1_fit)
coef(logreg1_fit)
par(mfrow(1,2))
par(mfrow = c(1,2))
ggplot(breast_cancer_data_cleaned, aes(x = Class, y = Cl.thickness, fill = Class)) +
geom_boxplot() +
labs(title = "Boxplot of Cell thickness, by Class") +
theme_bw()
ggplot(breast_cancer_data_cleaned, aes(x = Cell.size, fill = Class)) +
geom_bar(position = "dodge") +
geom_text(
aes(label = stat(count)),
stat = "count",
position = position_dodge(width = 0.9),
vjust = -0.5,
size = 3
) +
labs(title = "Bar plot of Cell size by Class with Counts", x = "Cell Size", y = "Count") +
theme_bw()
par(mfrow = c(1,2))
ggplot(breast_cancer_data_cleaned, aes(x = Class, y = Cl.thickness, fill = Class)) +
geom_boxplot() +
labs(title = "Boxplot of Cell thickness, by Class") +
theme_bw()
ggplot(breast_cancer_data_cleaned, aes(x = Cell.size, fill = Class)) +
geom_bar(position = "dodge") +
geom_text(
aes(label = stat(count)),
stat = "count",
position = position_dodge(width = 0.9),
vjust = -0.5,
size = 3
) +
labs(title = "Bar plot of Cell size by Class with Counts", x = "Cell Size", y = "Count") +
theme_bw()
par(mfrow = c(1,2))
ggplot(breast_cancer_data_cleaned, aes(x = Class, y = Cl.thickness, fill = Class)) +
geom_boxplot() +
labs(title = "Boxplot of Cell thickness, by Class") +
theme_bw()
ggplot(breast_cancer_data_cleaned, aes(x = Cell.size, fill = Class)) +
geom_bar(position = "dodge") +
geom_text(
aes(label = stat(count)),
stat = "count",
position = position_dodge(width = 0.9),
vjust = -0.5,
size = 3
) +
labs(title = "Bar plot of Cell size by Class with Counts", x = "Cell Size", y = "Count") +
theme_bw()
library(gridExtra)
plot1 = ggplot(breast_cancer_data_cleaned, aes(x = Class, y = Cl.thickness, fill = Class)) +
geom_boxplot() +
labs(title = "Boxplot of Cell thickness, by Class") +
theme_bw()
plot2 = ggplot(breast_cancer_data_cleaned, aes(x = Cell.size, fill = Class)) +
geom_bar(position = "dodge") +
geom_text(
aes(label = stat(count)),
stat = "count",
position = position_dodge(width = 0.9),
vjust = -0.5,
size = 3
) +
labs(title = "Bar plot of Cell size by Class with Counts", x = "Cell Size", y = "Count") +
theme_bw()
grid.arrange(plot1, plot2, nrow = 1)
ggplot(breast_cancer_data_cleaned, aes(x = Class, y = Cl.thickness, fill = Class)) +
geom_boxplot() +
labs(title = "Boxplot of Cell thickness, by Class") +
theme_bw()
ggplot(breast_cancer_data_cleaned, aes(x = Cell.size, fill = Class)) +
geom_bar(position = "dodge") +
geom_text(
aes(label = stat(count)),
stat = "count",
position = position_dodge(width = 0.9),
vjust = -0.5,
size = 3
) +
labs(title = "Bar plot of Cell size by Class with Counts", x = "Cell Size", y = "Count") +
theme_bw()
?plot
p = ncol(model_ready_data) - 1
par(mfrow = c(1,2))
plot(0:p, best_fit_AIC$Subsets$AIC, type = "b" , xlab = "Number of predictors", ylab = "AIC", main = "Fig 2.1.1 Number of Predictors based on AIC")
points(best_AIC, best_fit_AIC$Subsets$AIC[best_AIC+1], col="red", pch=16)
axis(side = 1, at = 0:p)
plot(0:p, best_fit_BIC$Subsets$BIC, type = "b", xlab = "Number of predictors", ylab = "BIC", main = "Fig 2.1.2 Number of Predictors based on BIC")
points(best_BIC, best_fit_BIC$Subsets$BIC[best_BIC+1], col="red", pch=16)
axis(side = 1, at = 0:p)
p = ncol(model_ready_data) - 1
plot(0:p, best_fit_AIC$Subsets$AIC, type = "b" , xlab = "Number of predictors", ylab = "AIC", main = "Fig 2.1.1 Number of Predictors based on AIC")
points(best_AIC, best_fit_AIC$Subsets$AIC[best_AIC+1], col="red", pch=16)
axis(side = 1, at = 0:p)
plot(0:p, best_fit_BIC$Subsets$BIC, type = "b", xlab = "Number of predictors", ylab = "BIC", main = "Fig 2.1.2 Number of Predictors based on BIC")
points(best_BIC, best_fit_BIC$Subsets$BIC[best_BIC+1], col="red", pch=16)
axis(side = 1, at = 0:p)
grid = 10^seq(1, -3, length.out = 100)
lasso_fit = glmnet(X_scaled, y, family = "binomial", alpha = 1, lambda = grid )
plot(lasso_fit, xvar = "lambda", col=rainbow(p), label = TRUE, main = "Fig. 2.2.1 LASSO Fit")
lasso_cv_fit = cv.glmnet(X_scaled, y, family = "binomial", alpha = 1, standardize = FALSE, lambda = grid, type.measure = "class")
plot(lasso_cv_fit, title(main = "Fig. 2.2.2 Cross validation for single parameter"))
lasso_cv_fit = cv.glmnet(X_scaled, y, family = "binomial", alpha = 1, standardize = FALSE, lambda = grid, type.measure = "class")
plot(lasso_cv_fit)
title(main = "Fig. 2.2.2 Cross validation for single parameter")
lasso_cv_fit = cv.glmnet(X_scaled, y, family = "binomial", alpha = 1, standardize = FALSE, lambda = grid, type.measure = "class")
plot(lasso_cv_fit, main = "Fig. 2.2.2 Cross validation for single parameter")
lasso_cv_fit = cv.glmnet(X_scaled, y, family = "binomial", alpha = 1, standardize = FALSE, lambda = grid, type.measure = "class")
plot(lasso_cv_fit)
p = ncol(model_ready_data) - 1
plot(0:p, best_fit_AIC$Subsets$AIC, type = "b" , xlab = "Number of predictors", ylab = "AIC")
points(best_AIC, best_fit_AIC$Subsets$AIC[best_AIC+1], col="red", pch=16)
axis(side = 1, at = 0:p)
plot(0:p, best_fit_BIC$Subsets$BIC, type = "b", xlab = "Number of predictors", ylab = "BIC")
points(best_BIC, best_fit_BIC$Subsets$BIC[best_BIC+1], col="red", pch=16)
axis(side = 1, at = 0:p)
ggplot(melt(correlation_matrix), aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient(high = "darkblue", low = "skyblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(melt(correlation_matrix), aes(Var1, Var2, fill = value)) +
geom_tile() +
labs(title = "Correlation Heatmap") +
scale_fill_gradient(high = "darkblue", low = "skyblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(breast_cancer_data_cleaned, aes(x = Class, y = Cl.thickness, fill = Class)) +
geom_boxplot() +
labs(title = "Boxplot of Cell thickness, by Class") +
theme_bw()
ggplot(breast_cancer_data_cleaned, aes(x = Cell.size, fill = Class)) +
geom_bar(position = "dodge") +
geom_text(
aes(label = stat(count)),
stat = "count",
position = position_dodge(width = 0.9),
vjust = -0.5,
size = 3
) +
labs(title = "Bar plot of Cell size by Class with Counts", x = "Cell Size", y = "Count") +
theme_bw()
grid = 10^seq(1, -3, length.out = 100)
lasso_fit = glmnet(X_scaled, y, family = "binomial", alpha = 1, lambda = grid )
par(mar = c(5, 5, 4, 2) + 0.1)
plot(lasso_fit, xvar = "lambda", col=rainbow(p), label = TRUE, main = "Fig. 2.2.1 LASSO Fit")
grid = 10^seq(1, -3, length.out = 100)
lasso_fit = glmnet(X_scaled, y, family = "binomial", alpha = 1, lambda = grid )
#par(mar = c(5, 5, 4, 2) + 0.1)
plot(lasso_fit, xvar = "lambda", col=rainbow(p), label = TRUE, main = "Fig. 2.2.1 LASSO Fit")
grid = 10^seq(1, -3, length.out = 100)
lasso_fit = glmnet(X_scaled, y, family = "binomial", alpha = 1, lambda = grid )
par(mar = c(5, 5, 4, 2) + 0.1)
plot(lasso_fit, xvar = "lambda", col=rainbow(p), label = TRUE)
title(main = "Fig. 2.2.1 LASSO Fit", line = 2)
lasso_cv_fit = cv.glmnet(X_scaled, y, family = "binomial", alpha = 1, standardize = FALSE, lambda = grid, type.measure = "class")
par(mar = c(5, 5, 4, 2) + 0.1)
plot(lasso_cv_fit)
title(main = "Fig 2.2.2 Cross validation of LASSO", line = 2)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(mlbench)
library(dplyr)
library(ggplot2)
library(leaps)
library(reshape2)
library(bestglm)
library(glmnet)
library(MASS)
library(caret)
library(gridExtra)
data("BreastCancer")
breast_cancer_data = BreastCancer
head(breast_cancer_data)
predictor_cols = c("Cl.thickness", "Cell.size", "Cell.shape", "Marg.adhesion", "Epith.c.size", "Bare.nuclei", "Bl.cromatin", "Normal.nucleoli", "Mitoses")
for (col in predictor_cols) {
breast_cancer_data[[col]] = as.numeric(as.character(breast_cancer_data[[col]]))
}
str(breast_cancer_data)
rows_na = which(apply(is.na(breast_cancer_data), 1, any))
rows_missing_data = breast_cancer_data[rows_na, ]
rows_missing_data
breast_cancer_data_cleaned = na.omit(breast_cancer_data)
str(breast_cancer_data_cleaned)
summary(breast_cancer_data_cleaned)
ggplot(breast_cancer_data_cleaned, aes(x = Class, y = Cl.thickness, fill = Class)) +
geom_boxplot() +
labs(title = "Fig 1.1 Boxplot of Cell thickness, by Class") +
theme_bw()
ggplot(breast_cancer_data_cleaned, aes(x = Cell.size, fill = Class)) +
geom_bar(position = "dodge") +
geom_text(
aes(label = stat(count)),
stat = "count",
position = position_dodge(width = 0.9),
vjust = -0.5,
size = 3
) +
labs(title = "Fig 1.2 Bar plot of Cell size by Class with Counts", x = "Cell Size", y = "Count") +
theme_bw()
predictor_data = breast_cancer_data_cleaned[, predictor_cols]
correlation_matrix = cor(predictor_data)
print(correlation_matrix)
ggplot(melt(correlation_matrix), aes(Var1, Var2, fill = value)) +
geom_tile() +
labs(title = "Fig 1.3 Correlation Heatmap") +
scale_fill_gradient(high = "darkblue", low = "skyblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
y = breast_cancer_data_cleaned$Class
X_scaled = scale(predictor_data)
model_ready_data = data.frame(X_scaled, y)
head(model_ready_data)
best_fit_AIC = bestglm(model_ready_data, family = binomial, IC = "AIC")
best_fit_BIC = bestglm(model_ready_data, family = binomial, IC = "BIC")
summary(best_fit_AIC)
summary(best_fit_BIC)
best_fit_AIC$Subsets
best_fit_BIC$Subsets
(best_AIC = best_fit_AIC$ModelReport$Bestk)
(best_BIC = best_fit_BIC$ModelReport$Bestk)
p = ncol(model_ready_data) - 1
plot(0:p, best_fit_AIC$Subsets$AIC, type = "b" , xlab = "Number of predictors", ylab = "AIC", main = "Fig 2.1.1 Number of Predictors based on AIC")
points(best_AIC, best_fit_AIC$Subsets$AIC[best_AIC+1], col="red", pch=16)
axis(side = 1, at = 0:p)
plot(0:p, best_fit_BIC$Subsets$BIC, type = "b", xlab = "Number of predictors", ylab = "BIC", main = "Fig 2.1.2 Number of Predictors based on BIC")
points(best_BIC, best_fit_BIC$Subsets$BIC[best_BIC+1], col="red", pch=16)
axis(side = 1, at = 0:p)
pstar = 6
best_fit_AIC$Subsets[pstar+1, ]
(indices = as.logical(best_fit_AIC$Subsets[pstar+1, 2:(p+1)]))
model_ready_data_red = data.frame(X_scaled[, indices], y)
logreg1_fit = glm(y ~ ., data = model_ready_data_red, family = "binomial")
coef(logreg1_fit)
grid = 10^seq(1, -3, length.out = 100)
lasso_fit = glmnet(X_scaled, y, family = "binomial", alpha = 1, lambda = grid )
par(mar = c(5, 5, 4, 2) + 0.1)
plot(lasso_fit, xvar = "lambda", col=rainbow(p), label = TRUE)
title(main = "Fig. 2.2.1 LASSO Fit", line = 2)
lasso_cv_fit = cv.glmnet(X_scaled, y, family = "binomial", alpha = 1, standardize = FALSE, lambda = grid, type.measure = "class")
par(mar = c(5, 5, 4, 2) + 0.1)
plot(lasso_cv_fit)
title(main = "Fig 2.2.2 Cross validation of LASSO", line = 2)
lambda_lasso_min = lasso_cv_fit$lambda.min
print(paste("Minimum value for lambda ", lambda_lasso_min))
which_lamda_lasso = which(lasso_cv_fit$lambda == lambda_lasso_min)
print(paste("Row number with least lambda value ", which_lamda_lasso))
coef(lasso_fit, s = lambda_lasso_min)
(lda_model = lda(y ~ ., data = model_ready_data))
ctrl = trainControl(method = "cv", number = 10)
set.seed(123)
subset_cv_result = train(y ~ ., data = model_ready_data, method = "glm", family = "binomial", trControl = ctrl)
subset_test_error = 1 - mean(subset_cv_result$results$Accuracy)
print(paste("Test error of subset selection is ", subset_test_error))
lasso_ctrl = trainControl(method = "cv", number = 10)
set.seed(123)
lasso_cv_result = train(y ~ ., data = model_ready_data, method = "glmnet", trControl = lasso_ctrl)
lasso_test_error = 1 - mean(lasso_cv_result$results$Accuracy)
print(paste("Test error of LASSO model is ", lasso_test_error))
lda_ctrl = trainControl(method = "cv", number = 10)
set.seed(123)
lda_cv_result = train(y ~ ., data = model_ready_data, method = "lda", trControl = lda_ctrl)
lda_error = 1 - mean(lda_cv_result$results$Accuracy)
print(paste("Test error of LDA is ", lda_error))
subset_accuracy = round(100 * mean(subset_cv_result$results$Accuracy), 2)
lasso_accuracy = round(100 * mean(lasso_cv_result$results$Accuracy), 2)
lda_accuracy = round(100 * mean(lda_cv_result$results$Accuracy), 2)
subset_test_percent = round((subset_test_error * 100), 2)
lasso_test_percent = round((lasso_test_error * 100), 2)
lda_test_percent = round((lda_error * 100), 2)
performance_table = data.frame(
Method = c("Best Subset Selection", "Regression Method - LASSO", "Discriminant Analysis - LDA"),
Accuracy = c(subset_accuracy, lasso_accuracy, lda_accuracy),
Error_rate = c( subset_test_percent, lasso_test_percent, lda_test_percent)
)
print(performance_table)
